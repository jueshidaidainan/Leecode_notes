/*
零钱兑换 Ⅱ 518
理解为完全背包问题还是比较容易的，需要注意的是初始化和递推公式的设定
初始化：下标为0的应该初始化为1（有一个测试用例给的就是1），非零下标初始化为0（从递推公式可以看出）
递推公式：这种求解种类数的递推公式一般都是这个，参见494的目标和。考虑的是： 当前容量放置当前物品 + 当前背包容量放置上一个物品的值
先遍历物品再遍历背包所得是一种组合情况（因为物品的出现在背包中是有序的，只有一种情况，比如：1 2这种），先背包再物品所得是一种排列
（物品在背包中出现会是1 2 还有 2 1这种）。而对于此题，所求是一种组合数，所以是先物品后背包的遍历顺序。
*/
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int>dp(amount + 1, 0);
        dp[0] = 1;
        for(int i = 0; i < coins.size(); i++)//物品
            for(int j = coins[i]; j <= amount; j++)//背包
                dp[j] += dp[j - coins[i]];
        return dp[amount];
    }
};